
fn new @public
  case Host, Port:
    (ok, Conn) = shotgun.open(Host, Port)
    Conf = {host: Host, port: Port, conn: Conn, username: nil, token: nil}
    (ok, Conf)
end

fn close @public
  case Conf = {conn = Conn}:
    shotgun.close(Conn)
    Conf
end

fn login @public
  case Conf = {conn = Conn}, Username, Password:
    Path = path_for(Conf, login)
    Headers = {'Content-Type': 'application/json'}
    ReqBody = to_json({username: Username, password: Password})
    Options = {}
    (ok, Resp) = shotgun.post(Conn, Path, Headers, ReqBody, Options)

    match Resp:
      case {status_code = 201, body = RespBody}:
        match from_json(RespBody):
          case {'ok' = true, 'token' = Token}:
            NewConf = Conf#{username: Username, token: Token}
            (ok, NewConf)
          else:
            (error, (bad_body, Resp))
        end
      else:
        bad_response(Resp)
    end
end

fn clone_connection @public
  @doc("This function will create a new connection with the same settings
       as the current one, it's expected to be used after login to avoid having
       to call login and specifying the password and other settings again")
  case Conf = {host = Host, port = Port}:
    (ok, Conn) = shotgun.open(Host, Port)
    (ok, Conf#{conn: Conn})
end

fn send @public
  case Conf, Bucket, Stream, Body:
    Path = stream_path(Conf, Bucket, Stream)
    create(Conf, Path, Body)
end

fn send_patch @public
  case Conf, Bucket, Stream, Patch:
    Path = stream_path(Conf, Bucket, Stream)
    handle_200(patch(Conf, Path, Patch))
end

fn query @public
  case Conf, Bucket, Stream:
    query(Conf, Bucket, Stream, nil, 1)
end

fn query @public
  case Conf, Bucket, Stream, Limit:
    query(Conf, Bucket, Stream, nil, Limit)
end

fn query @public
  case Conf, Bucket, Stream, FromSeqNum, Limit:
    Path0 = stream_path(Conf, Bucket, Stream) ++ "?limit=" ++ integer_to_list(Limit)
    Path = when is_integer(FromSeqNum):
             Path0 ++ "&from=" ++ integer_to_list(FromSeqNum)
           else:
             Path0
           end

    get(Conf, Path)
end

fn ping @public
  case Conf:
    Path = path_for(Conf, ping)
    get(Conf, Path)
end

fn list_buckets @public
  case Conf:
    Path = path_for(Conf, bucket_list)
    get(Conf, Path)
end

fn list_streams @public
  case Conf, Bucket:
    Path = path_for(Conf, stream_list, Bucket)
    get(Conf, Path)
end

fn get_session @public
  case Conf:
    Path = path_for(Conf, session)
    get(Conf, Path)
end

fn create_user @public
  case Conf, Username, Password:
    Path = path_for(Conf, user)
    Body = {username: Username, password: Password}
    create(Conf, Path, Body)
end

fn grant_bucket @public
  case Conf, Bucket, Username, Permission
         when Permission is get; Permission is put;
              Permission is list; Permission is grant:

    access(Conf, (bucket, Bucket), Username, Permission, 'grant')
  case _Conf, _Bucket, _Username, Permission:
    (error, (invalid_permission, Permission))
end

fn revoke_bucket @public
  case Conf, Bucket, Username, Permission
         when Permission is get; Permission is put;
              Permission is list; Permission is grant:

    access(Conf, (bucket, Bucket), Username, Permission, 'revoke')
  case _Conf, _Bucket, _Username, Permission:
    (error, (invalid_permission, Permission))
end

fn grant_stream @public
  case Conf, Bucket, Stream, Username, Permission
         when Permission is get; Permission is put; Permission is grant:

    access(Conf, (stream, Bucket, Stream), Username, Permission, 'grant')
  case _Conf, _Bucket, _Stream, _Username, Permission:
    (error, (invalid_permission, Permission))
end

fn revoke_stream @public
  case Conf, Bucket, Stream, Username, Permission
         when Permission is get; Permission is put; Permission is grant:

    access(Conf, (stream, Bucket, Stream), Username, Permission, 'revoke')
  case _Conf, _Bucket, _Stream, _Username, Permission:
    (error, (invalid_permission, Permission))
end

#_ "Private Functions"

fn access
  case Conf, PathData, Username, Permission, Action:
    Path = path_for(Conf, access, PathData)
    Body = {role: Username, permission: Permission, action: Action}
    handle_200(post(Conf, Path, Body))
end

fn path_for
  case _Conf, login: "/sessions"
  case _Conf, session: "/sessions"
  case _Conf, user: "/users"
  case _Conf, ping: "/ping"
  case _Conf, bucket_list: "/buckets"
end

fn path_for
  case _Conf, stream_list, Bucket:
    io_lib.format("/streams/~s", [Bucket])
  case _Conf, access, (bucket, Bucket):
    io_lib.format("/access/~s", [Bucket])
  case _Conf, access, (stream, Bucket, Stream):
    io_lib.format("/access/~s/~s", [Bucket, Stream])
end

fn stream_path
  case _Conf, Bucket, Stream:
    io_lib.format("/streams/~s/~s/", [Bucket, Stream])
end

fn json_headers
  case nil:
    {'Content-Type': 'application/json'}
  case Token:
    {'Content-Type': 'application/json', 'x-session': Token}
end

fn post
  case {conn = Conn, token = Token}, Path, Body:
    Headers = json_headers(Token)
    ReqBody = to_json(Body)
    Options = {}
    shotgun.post(Conn, Path, Headers, ReqBody, Options)
end

fn patch
  case {conn = Conn, token = Token}, Path, Body:
    Headers = when token is nil:
      {'Content-Type': 'application/json-patch+json'}
    else:
      {'Content-Type': 'application/json-patch+json', 'x-session': Token}
    end
    ReqBody = to_json(Body)
    Options = {}
    shotgun.patch(Conn, Path, Headers, ReqBody, Options)
end

fn get
  case {conn = Conn, token = Token}, Path:
    Headers = json_headers(Token)
    Options = {}
    handle_200(shotgun.get(Conn, Path, Headers, Options))
end

fn create
  case Conf, Path, Body:
    match post(Conf, Path, Body):
      case ok, {status_code = 201, body = RespBody}:
        (ok, from_json(RespBody))
      case BadResp:
        bad_response(BadResp)
    end
end

fn handle_200
  case (ok, {status_code = 200, body = RespBody}):
    (ok, from_json(RespBody))
  case BadResp:
     bad_response(BadResp)
end

fn from_json
  case Str: jsx.decode(Str, [return_maps])
end

fn to_json
  case Data: jsx.encode(Data)
end

fn bad_response
  case (ok, {status_code = 400, body = RespBody}):
    (error, (bad_request, from_json(RespBody)))
  case (ok, {status_code = 401, body = RespBody}):
    (error, (unauthorized, from_json(RespBody)))
  case Resp:
    (error, (unknown_error, Resp))
end
