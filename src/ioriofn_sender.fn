@behaviour(gen_server)

fn start_link @public
  @doc("Start a ioriofn_sender's instance with start_link")
  case Opts:
    gen_server.start_link(#i module, Opts, [])
end

fn stop @public
  @doc("Stop a ioriofn_sender's instance from the reference returned by start_link")
  case Ref:
    gen_server.call(Ref, stop)
end

fn send @public
  case Conn, Bucket, Stream, Data, Pid:
    T1 = ioriofn_util.now()

    R = try
      ioriofn.send(Conn, Bucket, Stream, Data)
    catch
      case T, E:
        (error, (T, E))
    end

    T2 = ioriofn_util.now()
    Time = T2 - T1
    Pid ! (send_result, Time, R)
end

#_ "gen_server callbacks"

fn init @public
  @doc("gen_server callback to initialize ioriofn_sender's state")

  case Opts = {username = Username, password = Password,
        host = Host, port = Port,
        bucket = Bucket, stream = Stream,
        timeouts = TimeoutValues, messages = MessageValues}:

    (ok, C1) = ioriofn.new(Host, Port)
    (ok, C2) = ioriofn.login(C1, Username, Password)

    Timeouts = ioriofn_cycle.new(TimeoutValues)
    Messages = ioriofn_cycle.new(MessageValues)

    Verbose = maps.get(verbose, Opts, false)

    (Timeout, Timeouts1) = ioriofn_cycle.next(Timeouts)

    State = {conn: C2, timeouts: Timeouts1, messages: Messages,
             username: Username, password: Password,
             bucket: Bucket, stream: Stream,
             host: Host, port: Port, verbose: Verbose}

    (ok, State, Timeout)
end


fn handle_call @public
  @doc("gen_server callback to handle ioriofn_sender's calls")

  case stop, _From, State:
    (stop, normal, stopped, State)
end


fn handle_cast @public
  @doc("gen_server callback to handle ioriofn_sender's casts")

  case Msg, State:
    log("Unknown cast ~p, ~p.", [Msg, State])
    (noreply, State)
end


fn handle_info @public
  @doc("gen_server callback to handle ioriofn_sender's info calls")
  case (send_result, Time, (ok, Result)), State = {bucket = Bucket, stream = Stream}:
    ioriofn_metric.send_ok(Bucket, Stream, Time, Result)
    (Timeout, NewState) = next_timeout(State)
    (noreply, NewState, Timeout)
  case (send_result, Time, Result), State = {bucket = Bucket, stream = Stream}:
    ioriofn_metric.send_error(Bucket, Stream, Time, Result)
    log("error: ~p/~p ~p", [Bucket, Stream, Result)
    (Timeout, NewState) = next_timeout(State)
    (noreply, NewState, Timeout)
  case timeout, State = {bucket = Bucket, stream = Stream, conn = Conn,
                         messages = Messages, verbose = Verbose}:
    (Message, NewMessages) = next_message(Messages)
    Pid = self()
    when Verbose: io.format("sending event ~p ~s~n", [Pid, Message]) else: ok end
    timer.apply_after(1, #i module, send, [Conn, Bucket, Stream, Message, Pid])
    (Timeout, NewState) = next_timeout(State)
    (noreply, NewState#{messages: NewMessages}, Timeout)
  case Info, State:
    log("info ~p, ~p.", [Info, State])
    (noreply, State)
end


fn terminate @public
  @doc("gen_server callback to handle ioriofn_sender's terminate call")

  case Reason, _State:
    log("terminate ~p", [Reason])
    ok
end


fn code_change @public
  @doc("gen_server callback to handle ioriofn_sender's code_change call")
  case OldVsn, State, Extra:
    log("code_change ~p, ~p, ~p", [OldVsn, State, Extra])
    (ok, State)
end

#_ "private functions"

fn log
  @doc("logging function, change this for your preferred logging library")

  case Format, Data:
    io.format("~p:~p: ~s~n", [#i module, self(), io_lib.format(Format, Data)])
end

fn next_timeout case State = {timeouts = Timeouts}:
  (Timeout, NewTimeouts) = ioriofn_cycle.next(Timeouts)
  NewState = State#{timeouts: NewTimeouts}
  (Timeout, NewState)
end

fn next_message case Msgs:
  (Msg, NewMsgs) = ioriofn_cycle.next(Msgs)
  FMsg = when is_function(Msg):
    Msg()
  else:
    Msg
  end
  (FMsg, NewMsgs)
end
