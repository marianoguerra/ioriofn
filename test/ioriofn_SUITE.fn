
fn all @public case:
  [ping, ping_not_authenticated,
   get_session, get_session_not_authenticated,
   list_buckets, list_buckets_unauthenticated, list_buckets_unauthorized,
   list_streams, list_streams_unauthenticated, list_streams_unauthorized,
   grant_revoke_own_bucket, grant_revoke_other_bucket, grant_revoke_other_bucket_not_authenticated,
   grant_revoke_own_stream, grant_revoke_other_stream, grant_revoke_other_stream_not_authenticated]
end

fn log case Value: ct.pal("~p~n", [Value]) end

fn new_connection case:
  Host = "localhost"
  Port = 8080
  ioriofn.new(Host, Port)
end

fn new_login case Username, Password:
  (ok, C1) = new_connection()
  ioriofn.login(C1, Username, Password)
end


fn init_per_suite @public case Config:
  application.ensure_all_started(ioriofn)
  Config
end

fn init_per_testcase @public case _Test, Config:
  (ok, Conn) = new_login('mariano', 'secret')
  [(conn, Conn) :: Config]
end

fn with_connection case Fn:
  (ok, C1) = new_connection()
  try
    Fn(C1)
  catch case T, E:
    ct.pal("error: ~p:~p~n", [T, E])
    throw((error, (T, E)))
  after
    ioriofn.close(C1)
  end
end

fn with_login case Fn, Username, Password:
  (ok, C1) = new_login(Username, Password)
  try
    Fn(C1)
  catch case T, E:
    ct.pal("error: ~p:~p~n", [T, E])
    throw((error, (T, E)))
  after
    ioriofn.close(C1)
  end
end

fn end_per_testcase @public case _Test, Config:
  Conn = conn(Config)
  ioriofn.close(Conn)
  Config
end

fn conn case Config:
  proplists.get_value(conn, Config)
end

fn ping_not_authenticated @public case _Config:
  with_connection() <- case Conn:
    (ok, {'pong' = _}) = ioriofn.ping(Conn)
  end
end

fn ping @public case Config:
  Conn = conn(Config)
  (ok, {'pong' = _}) = ioriofn.ping(Conn)
end

fn get_session @public case Config:
  Conn = conn(Config)
  (ok, {'username' = 'mariano'}) = ioriofn.get_session(Conn)
end

fn get_session_not_authenticated @public case _Config:
  with_connection() <- case Conn:
    (ok, {'username' = 'anonymous'}) = ioriofn.get_session(Conn)
  end
end

fn list_buckets_unauthenticated @public case _Config:
  with_connection() <- case Conn:
    (error, (unauthorized, {'reason' = 'No Permission',
                            'type' = 'no-perm'})) = ioriofn.list_buckets(Conn)
  end
end

fn list_buckets_unauthorized @public case Config:
  Conn = conn(Config)
  (error, (unauthorized, {'reason' = 'No Permission',
                          'type' = 'no-perm'})) = ioriofn.list_buckets(Conn)
end

fn list_buckets @public case _Config:
  with_login('admin', 'secret') <<- case Conn:
    (ok, _) = ioriofn.list_buckets(Conn)
  end
end

fn list_streams_unauthenticated @public case _Config:
  with_connection() <- case Conn:
    Response = (error, (unauthorized, {'reason': 'No Permission', 'type': 'no-perm'}))
    Response = ioriofn.list_streams(Conn, '_user_mariano')
  end
end

fn list_streams_unauthorized @public case Config:
  Conn = conn(Config)
  Response = (error, (unauthorized, {'reason': 'No Permission', 'type': 'no-perm'}))
  Response = ioriofn.list_streams(Conn, '_user_admin')
end

fn list_streams @public case Config:
  Conn = conn(Config)
  (ok, {'data' = Streams, 'status' = 'ok'}) = ioriofn.list_streams(Conn, '_user_mariano')
  true = is_list(Streams)
end

fn grant_revoke_own_bucket @public case Config:
  Conn = conn(Config)
  Response = (ok, {'ok': true})
  Response = ioriofn.grant_bucket(Conn, '_user_mariano', 'admin', get)
  Response = ioriofn.grant_bucket(Conn, '_user_mariano', 'admin', put)
  Response = ioriofn.grant_bucket(Conn, '_user_mariano', 'admin', grant)

  Response = ioriofn.revoke_bucket(Conn, '_user_mariano', 'admin', get)
  Response = ioriofn.revoke_bucket(Conn, '_user_mariano', 'admin', put)
  Response = ioriofn.revoke_bucket(Conn, '_user_mariano', 'admin', grant)
end

fn grant_revoke_other_bucket @public case Config:
  Conn = conn(Config)
  Response = (error, (unauthorized, {'reason': 'No Permission', 'type': 'no-perm'}))
  Response = ioriofn.grant_bucket(Conn, 'public', 'admin', get)
  Response = ioriofn.grant_bucket(Conn, 'public', 'admin', put)
  Response = ioriofn.grant_bucket(Conn, 'public', 'admin', grant)
  Response = ioriofn.grant_bucket(Conn, 'public', 'admin', list)

  Response = ioriofn.revoke_bucket(Conn, 'public', 'admin', get)
  Response = ioriofn.revoke_bucket(Conn, 'public', 'admin', put)
  Response = ioriofn.revoke_bucket(Conn, 'public', 'admin', grant)
  Response = ioriofn.revoke_bucket(Conn, 'public', 'admin', list)
end

fn grant_revoke_other_bucket_not_authenticated @public case Config:
  with_connection() <- case Conn:
    Response = (error, (unauthorized, {'reason': 'No Permission', 'type': 'no-perm'}))
    Response = ioriofn.grant_bucket(Conn, 'public', 'admin', get)
    Response = ioriofn.grant_bucket(Conn, 'public', 'admin', put)
    Response = ioriofn.grant_bucket(Conn, 'public', 'admin', grant)
    Response = ioriofn.grant_bucket(Conn, 'public', 'admin', list)

    Response = ioriofn.revoke_bucket(Conn, 'public', 'admin', get)
    Response = ioriofn.revoke_bucket(Conn, 'public', 'admin', put)
    Response = ioriofn.revoke_bucket(Conn, 'public', 'admin', grant)
    Response = ioriofn.revoke_bucket(Conn, 'public', 'admin', list)
  end
end

fn grant_revoke_own_stream @public case Config:
  Conn = conn(Config)
  Response = (ok, {'ok': true})
  Response = ioriofn.grant_stream(Conn, '_user_mariano', 'ct', 'admin', get)
  Response = ioriofn.grant_stream(Conn, '_user_mariano', 'ct', 'admin', put)
  Response = ioriofn.grant_stream(Conn, '_user_mariano', 'ct', 'admin', grant)

  Response = ioriofn.revoke_stream(Conn, '_user_mariano', 'ct', 'admin', get)
  Response = ioriofn.revoke_stream(Conn, '_user_mariano', 'ct', 'admin', put)
  Response = ioriofn.revoke_stream(Conn, '_user_mariano', 'ct', 'admin', grant)
end

fn grant_revoke_other_stream @public case Config:
  Conn = conn(Config)
  Response = (error, (unauthorized, {'reason': 'No Permission', 'type': 'no-perm'}))
  Response = ioriofn.grant_stream(Conn, 'public', 'ct', 'admin', get)
  Response = ioriofn.grant_stream(Conn, 'public', 'ct', 'admin', put)
  Response = ioriofn.grant_stream(Conn, 'public', 'ct', 'admin', grant)

  Response = ioriofn.revoke_stream(Conn, 'public', 'ct', 'admin', get)
  Response = ioriofn.revoke_stream(Conn, 'public', 'ct', 'admin', put)
  Response = ioriofn.revoke_stream(Conn, 'public', 'ct', 'admin', grant)
end

fn grant_revoke_other_stream_not_authenticated @public case Config:
  with_connection() <- case Conn:
    Response = (error, (unauthorized, {'reason': 'No Permission', 'type': 'no-perm'}))
    Response = ioriofn.grant_stream(Conn, 'public', 'ct', 'admin', get)
    Response = ioriofn.grant_stream(Conn, 'public', 'ct', 'admin', put)
    Response = ioriofn.grant_stream(Conn, 'public', 'ct', 'admin', grant)

    Response = ioriofn.revoke_stream(Conn, 'public', 'ct', 'admin', get)
    Response = ioriofn.revoke_stream(Conn, 'public', 'ct', 'admin', put)
    Response = ioriofn.revoke_stream(Conn, 'public', 'ct', 'admin', grant)
  end
end
